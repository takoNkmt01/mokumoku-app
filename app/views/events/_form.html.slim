= render 'shared/errors', obj: @event_with_map
.p-3.bg-white.mb-4
  = form_with(model: @event_with_map, url: url_pass, method: obj, local: true) do |f|
    = f.fields_for :event do |event_fields|
      .form-group
        = event_fields.label :event_name, 'イベント名'
        = event_fields.text_field :event_name, class: 'form-control'
      .form-group
        = event_fields.label :event_content, 'イベント内容'
        = event_fields.text_area :event_content, class: 'form-control', size: '30x10'
      .form-group
        = event_fields.label :overview, 'イベント概要'
        = event_fields.text_area :overview, class: 'form-control', size: '30x10'
      .form-group
        = event_fields.label :event_capacity, '参加者定員'
        = event_fields.number_field :event_capacity, class: 'form-control col-sm-1 my-1'
      .form-group
        = event_fields.label :start_at, '開始日時'
        #datetimepicker1.input-group.date.col-sm-5[data-target-input="nearest"]
          = event_fields.text_field :start_at, class: "form-control datetimepicker-input", data: {target: "#datetimepicker1"}
          .input-group-append[data-target="#datetimepicker1" data-toggle="datetimepicker"]
            .input-group-text
              i.fa.fa-calendar
      .form-group
        = event_fields.label :end_at, '終了日時'
        #datetimepicker2.input-group.datec.col-sm-5[data-target-input="nearest"]
          = event_fields.text_field :end_at, class: "form-control datetimepicker-input", data: {target: "#datetimepicker2"}
          .input-group-append[data-target="#datetimepicker2" data-toggle="datetimepicker"]
            .input-group-text
              i.fa.fa-calendar
      .form-group
        = event_fields.label :necessities, '必要なもの'
        = event_fields.text_area :necessities, class: 'form-control', size: '30x10'
      .form-group
        label
          | スキルタグ（本イベントに関連のあるスキルタグを半角スペース区切りで複数登録できます!）
        input.form-control[type="text" name="tag_name" placeholder="例）PHP Laravel AWS"]
    = f.fields_for :map do |map_field|
      .form-group
        = map_field.label :address, '開催場所'
        = map_field.text_field :address, class: 'form-control mb-2', id: 'input-address'
        input[type="button" value="地図確認" onclick="codeAddress()"]
      #map.mb-3
    = f.submit '登録する', class: 'btn btn-primary'
    javascript:
      $(function () {
         $('#datetimepicker1').datetimepicker();
      });
      $(function () {
         $('#datetimepicker2').datetimepicker();
      });

= javascript_include_tag src="https://maps.googleapis.com/maps/api/js?v=3.exp&key=#{ENV['GOOGLE_MAP_API_KEY']}&callback=initMap", async: true, defer: true

javascript:
  
  var map;
  var getocoder;
  var marker;

  function initMap() {
    //initialize geoceder
    geocoder = new google.maps.Geocoder();

    var latlng = {lat: #{nil_check_for_latlng(@event.map.latitude)}, lng: #{nil_check_for_latlng(@event.map.longitude)}};

    map = new google.maps.Map(document.getElementById('map'), {
      center: latlng,
      zoom: 17
    });

    marker = new google.maps.Marker({
      map: map,
      position: latlng
    });
  }

  function codeAddress() {
    // fetch input value
    var inputAddress = document.getElementById('input-address').value;
    // move the map after geocoding
    geocoder.geocode({'address': inputAddress}, function(results, status) {
      if (status == 'OK') {
        map.setCenter(results[0].geometry.location);
        // initialize marker
        marker.setMap(null);
        marker = new google.maps.Marker({
          map: map,
          position: results[0].geometry.location
        });
      } else {
        alert('開催場所の特定ができませんでした。' + status)
      }
    });
  }
